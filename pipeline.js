
//write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. 
const mongoose = require('mongoose');

// Assuming a Mongoose model named Sale
const Sale = mongoose.model('Sale');

async function getMonthlyStoreRevenueAndAvgPrice() {
  try {
    const result = await Sale.aggregate([
      // Unwind the items array
      {
        $unwind: "$items"
      },
      // Add month field derived from date
      {
        $addFields: {
          month: {
            $dateToString: { format: "%Y-%m", date: "$date" }
          }
        }
      },
      // Project relevant fields
      {
        $project: {
          store: 1,
          month: 1,
          itemPrice: "$items.price",
          itemRevenue: { $multiply: ["$items.quantity", "$items.price"] }
        }
      },
      // Group by store and month
      {
        $group: {
          _id: {
            store: "$store",
            month: "$month"
          },
          totalRevenue: { $sum: "$itemRevenue" },
          averagePrice: { $avg: "$itemPrice" }
        }
      },
      // Reshape the final output
      {
        $project: {
          _id: 0,
          store: "$_id.store",
          month: "$_id.month",
          totalRevenue: 1,
          averagePrice: 1
        }
      },
      // Sort by store and month
      {
        $sort: {
          store: 1,
          month: 1
        }
      }
    ]);

    console.log("Monthly Revenue and Avg Price by Store:");
    console.log(result);
    return result;
  } catch (error) {
    console.error("Aggregation error:", error.message);
    throw error;
  }
}
